/**
 * generated by Xtext 2.14.0
 */
package org.xtext.slr.reliSRS;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>CDecision</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @see org.xtext.slr.reliSRS.ReliSRSPackage#getCDecision()
 * @model
 * @generated
 */
public enum CDecision implements Enumerator
{
  /**
   * The '<em><b>Cresolved Included</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #CRESOLVED_INCLUDED_VALUE
   * @generated
   * @ordered
   */
  CRESOLVED_INCLUDED(0, "CresolvedIncluded", "Resolved included"),

  /**
   * The '<em><b>Cresolved Excluded</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #CRESOLVED_EXCLUDED_VALUE
   * @generated
   * @ordered
   */
  CRESOLVED_EXCLUDED(1, "CresolvedExcluded", "Resolved excluded"),

  /**
   * The '<em><b>Cpending Conflict</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #CPENDING_CONFLICT_VALUE
   * @generated
   * @ordered
   */
  CPENDING_CONFLICT(2, "CpendingConflict", "Pending conflicts");

  /**
   * The '<em><b>Cresolved Included</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #CRESOLVED_INCLUDED
   * @model name="CresolvedIncluded" literal="Resolved included"
   * @generated
   * @ordered
   */
  public static final int CRESOLVED_INCLUDED_VALUE = 0;

  /**
   * The '<em><b>Cresolved Excluded</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #CRESOLVED_EXCLUDED
   * @model name="CresolvedExcluded" literal="Resolved excluded"
   * @generated
   * @ordered
   */
  public static final int CRESOLVED_EXCLUDED_VALUE = 1;

  /**
   * The '<em><b>Cpending Conflict</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #CPENDING_CONFLICT
   * @model name="CpendingConflict" literal="Pending conflicts"
   * @generated
   * @ordered
   */
  public static final int CPENDING_CONFLICT_VALUE = 2;

  /**
   * An array of all the '<em><b>CDecision</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static final CDecision[] VALUES_ARRAY =
    new CDecision[]
    {
      CRESOLVED_INCLUDED,
      CRESOLVED_EXCLUDED,
      CPENDING_CONFLICT,
    };

  /**
   * A public read-only list of all the '<em><b>CDecision</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final List<CDecision> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

  /**
   * Returns the '<em><b>CDecision</b></em>' literal with the specified literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param literal the literal.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static CDecision get(String literal)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      CDecision result = VALUES_ARRAY[i];
      if (result.toString().equals(literal))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>CDecision</b></em>' literal with the specified name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param name the name.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static CDecision getByName(String name)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      CDecision result = VALUES_ARRAY[i];
      if (result.getName().equals(name))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>CDecision</b></em>' literal with the specified integer value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the integer value.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static CDecision get(int value)
  {
    switch (value)
    {
      case CRESOLVED_INCLUDED_VALUE: return CRESOLVED_INCLUDED;
      case CRESOLVED_EXCLUDED_VALUE: return CRESOLVED_EXCLUDED;
      case CPENDING_CONFLICT_VALUE: return CPENDING_CONFLICT;
    }
    return null;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final int value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String name;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String literal;

  /**
   * Only this class can construct instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private CDecision(int value, String name, String literal)
  {
    this.value = value;
    this.name = name;
    this.literal = literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLiteral()
  {
    return literal;
  }

  /**
   * Returns the literal value of the enumerator, which is its string representation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    return literal;
  }
  
} //CDecision
