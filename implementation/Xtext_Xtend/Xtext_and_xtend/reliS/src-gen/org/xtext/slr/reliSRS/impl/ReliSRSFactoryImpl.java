/**
 * generated by Xtext 2.14.0
 */
package org.xtext.slr.reliSRS.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.slr.reliSRS.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ReliSRSFactoryImpl extends EFactoryImpl implements ReliSRSFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ReliSRSFactory init()
  {
    try
    {
      ReliSRSFactory theReliSRSFactory = (ReliSRSFactory)EPackage.Registry.INSTANCE.getEFactory(ReliSRSPackage.eNS_URI);
      if (theReliSRSFactory != null)
      {
        return theReliSRSFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ReliSRSFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReliSRSFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ReliSRSPackage.MODEL: return createModel();
      case ReliSRSPackage.PARTICIPANTS: return createParticipants();
      case ReliSRSPackage.CLASSIFICATION: return createClassification();
      case ReliSRSPackage.PHASES: return createPhases();
      case ReliSRSPackage.DECISION_PER_USER: return createDecisionPerUser();
      case ReliSRSPackage.STATISTICS_ON_EXCLUSION_CRITERIA: return createStatisticsOnExclusionCriteria();
      case ReliSRSPackage.CONFLICT_RESOLUTION: return createConflictResolution();
      case ReliSRSPackage.RESULT: return createResult();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case ReliSRSPackage.CDECISION:
        return createCDecisionFromString(eDataType, initialValue);
      case ReliSRSPackage.RDECISION:
        return createRDecisionFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case ReliSRSPackage.CDECISION:
        return convertCDecisionToString(eDataType, instanceValue);
      case ReliSRSPackage.RDECISION:
        return convertRDecisionToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Participants createParticipants()
  {
    ParticipantsImpl participants = new ParticipantsImpl();
    return participants;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Classification createClassification()
  {
    ClassificationImpl classification = new ClassificationImpl();
    return classification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Phases createPhases()
  {
    PhasesImpl phases = new PhasesImpl();
    return phases;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DecisionPerUser createDecisionPerUser()
  {
    DecisionPerUserImpl decisionPerUser = new DecisionPerUserImpl();
    return decisionPerUser;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StatisticsOnExclusionCriteria createStatisticsOnExclusionCriteria()
  {
    StatisticsOnExclusionCriteriaImpl statisticsOnExclusionCriteria = new StatisticsOnExclusionCriteriaImpl();
    return statisticsOnExclusionCriteria;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConflictResolution createConflictResolution()
  {
    ConflictResolutionImpl conflictResolution = new ConflictResolutionImpl();
    return conflictResolution;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Result createResult()
  {
    ResultImpl result = new ResultImpl();
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CDecision createCDecisionFromString(EDataType eDataType, String initialValue)
  {
    CDecision result = CDecision.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertCDecisionToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RDecision createRDecisionFromString(EDataType eDataType, String initialValue)
  {
    RDecision result = RDecision.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertRDecisionToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReliSRSPackage getReliSRSPackage()
  {
    return (ReliSRSPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ReliSRSPackage getPackage()
  {
    return ReliSRSPackage.eINSTANCE;
  }

} //ReliSRSFactoryImpl
