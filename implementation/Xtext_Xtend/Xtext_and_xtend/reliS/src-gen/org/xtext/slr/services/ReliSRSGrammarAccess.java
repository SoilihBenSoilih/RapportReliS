/*
 * generated by Xtext 2.14.0
 */
package org.xtext.slr.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ReliSRSGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.slr.ReliSRS.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProjectNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProjectNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProjectNameProjectNameParserRuleCall_1_0 = (RuleCall)cProjectNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cParticipantsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParticipantsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParticipantsParticipantsParserRuleCall_2_1_0 = (RuleCall)cParticipantsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cPhaseKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPhaseAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPhasePhasesParserRuleCall_3_1_0 = (RuleCall)cPhaseAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cClassificationKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cClassificationAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cClassificationClassificationParserRuleCall_4_1_0 = (RuleCall)cClassificationAssignment_4_1.eContents().get(0);
		
		//Model:
		//	'ProjectName:' projectName=ProjectName ('Participants:' participants=Participants) ('Phase:' phase+=Phases*)*
		//	('Classification:' classification=Classification);
		@Override public ParserRule getRule() { return rule; }
		
		//'ProjectName:' projectName=ProjectName ('Participants:' participants=Participants) ('Phase:' phase+=Phases*)*
		//('Classification:' classification=Classification)
		public Group getGroup() { return cGroup; }
		
		//'ProjectName:'
		public Keyword getProjectNameKeyword_0() { return cProjectNameKeyword_0; }
		
		//projectName=ProjectName
		public Assignment getProjectNameAssignment_1() { return cProjectNameAssignment_1; }
		
		//ProjectName
		public RuleCall getProjectNameProjectNameParserRuleCall_1_0() { return cProjectNameProjectNameParserRuleCall_1_0; }
		
		//'Participants:' participants=Participants
		public Group getGroup_2() { return cGroup_2; }
		
		//'Participants:'
		public Keyword getParticipantsKeyword_2_0() { return cParticipantsKeyword_2_0; }
		
		//participants=Participants
		public Assignment getParticipantsAssignment_2_1() { return cParticipantsAssignment_2_1; }
		
		//Participants
		public RuleCall getParticipantsParticipantsParserRuleCall_2_1_0() { return cParticipantsParticipantsParserRuleCall_2_1_0; }
		
		//('Phase:' phase+=Phases*)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'Phase:'
		public Keyword getPhaseKeyword_3_0() { return cPhaseKeyword_3_0; }
		
		//phase+=Phases*
		public Assignment getPhaseAssignment_3_1() { return cPhaseAssignment_3_1; }
		
		//Phases
		public RuleCall getPhasePhasesParserRuleCall_3_1_0() { return cPhasePhasesParserRuleCall_3_1_0; }
		
		//'Classification:' classification=Classification
		public Group getGroup_4() { return cGroup_4; }
		
		//'Classification:'
		public Keyword getClassificationKeyword_4_0() { return cClassificationKeyword_4_0; }
		
		//classification=Classification
		public Assignment getClassificationAssignment_4_1() { return cClassificationAssignment_4_1; }
		
		//Classification
		public RuleCall getClassificationClassificationParserRuleCall_4_1_0() { return cClassificationClassificationParserRuleCall_4_1_0; }
	}
	public class ProjectNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.slr.ReliSRS.ProjectName");
		private final RuleCall cCHAINEParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ProjectName:
		//	CHAINE;
		@Override public ParserRule getRule() { return rule; }
		
		//CHAINE
		public RuleCall getCHAINEParserRuleCall() { return cCHAINEParserRuleCall; }
	}
	public class ParticipantsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.slr.ReliSRS.Participants");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParticipantsAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cParticipantKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cParticipantAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cParticipantParticipantParserRuleCall_1_2_0 = (RuleCall)cParticipantAssignment_1_2.eContents().get(0);
		private final Keyword cRoleKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cRoleAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRoleRoleParserRuleCall_1_4_0 = (RuleCall)cRoleAssignment_1_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//Participants:
		//	{Participants} ('{' 'Participant:' participant+=Participant* 'Role:' role+=Role* '}')*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Participants} ('{' 'Participant:' participant+=Participant* 'Role:' role+=Role* '}')*
		public Group getGroup() { return cGroup; }
		
		//{Participants}
		public Action getParticipantsAction_0() { return cParticipantsAction_0; }
		
		//('{' 'Participant:' participant+=Participant* 'Role:' role+=Role* '}')*
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//'Participant:'
		public Keyword getParticipantKeyword_1_1() { return cParticipantKeyword_1_1; }
		
		//participant+=Participant*
		public Assignment getParticipantAssignment_1_2() { return cParticipantAssignment_1_2; }
		
		//Participant
		public RuleCall getParticipantParticipantParserRuleCall_1_2_0() { return cParticipantParticipantParserRuleCall_1_2_0; }
		
		//'Role:'
		public Keyword getRoleKeyword_1_3() { return cRoleKeyword_1_3; }
		
		//role+=Role*
		public Assignment getRoleAssignment_1_4() { return cRoleAssignment_1_4; }
		
		//Role
		public RuleCall getRoleRoleParserRuleCall_1_4_0() { return cRoleRoleParserRuleCall_1_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_5() { return cRightCurlyBracketKeyword_1_5; }
	}
	public class ParticipantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.slr.ReliSRS.Participant");
		private final RuleCall cCHAINEParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Participant:
		//	CHAINE;
		@Override public ParserRule getRule() { return rule; }
		
		//CHAINE
		public RuleCall getCHAINEParserRuleCall() { return cCHAINEParserRuleCall; }
	}
	public class RoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.slr.ReliSRS.Role");
		private final RuleCall cCHAINEParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Role:
		//	CHAINE;
		@Override public ParserRule getRule() { return rule; }
		
		//CHAINE
		public RuleCall getCHAINEParserRuleCall() { return cCHAINEParserRuleCall; }
	}
	public class ClassificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.slr.ReliSRS.Classification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassificationAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cQuestionKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cQuestionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cQuestionQuestionParserRuleCall_1_2_0 = (RuleCall)cQuestionAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Keyword cResponseKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cResponseAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cResponseResponseParserRuleCall_1_3_2_0 = (RuleCall)cResponseAssignment_1_3_2.eContents().get(0);
		private final Keyword cResultKeyword_1_3_3 = (Keyword)cGroup_1_3.eContents().get(3);
		private final Assignment cResultatAssignment_1_3_4 = (Assignment)cGroup_1_3.eContents().get(4);
		private final RuleCall cResultatResultatParserRuleCall_1_3_4_0 = (RuleCall)cResultatAssignment_1_3_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3_5 = (Keyword)cGroup_1_3.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//Classification:
		//	{Classification} ('{' 'question:' question+=Question ('{'
		//	'response:' response+=Response
		//	'result:' resultat+=Resultat
		//	'}')*
		//	'}')*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Classification} ('{' 'question:' question+=Question ('{' 'response:' response+=Response 'result:' resultat+=Resultat
		//'}')* '}')*
		public Group getGroup() { return cGroup; }
		
		//{Classification}
		public Action getClassificationAction_0() { return cClassificationAction_0; }
		
		//('{' 'question:' question+=Question ('{' 'response:' response+=Response 'result:' resultat+=Resultat '}')* '}')*
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//'question:'
		public Keyword getQuestionKeyword_1_1() { return cQuestionKeyword_1_1; }
		
		//question+=Question
		public Assignment getQuestionAssignment_1_2() { return cQuestionAssignment_1_2; }
		
		//Question
		public RuleCall getQuestionQuestionParserRuleCall_1_2_0() { return cQuestionQuestionParserRuleCall_1_2_0; }
		
		//('{' 'response:' response+=Response 'result:' resultat+=Resultat '}')*
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_3_0() { return cLeftCurlyBracketKeyword_1_3_0; }
		
		//'response:'
		public Keyword getResponseKeyword_1_3_1() { return cResponseKeyword_1_3_1; }
		
		//response+=Response
		public Assignment getResponseAssignment_1_3_2() { return cResponseAssignment_1_3_2; }
		
		//Response
		public RuleCall getResponseResponseParserRuleCall_1_3_2_0() { return cResponseResponseParserRuleCall_1_3_2_0; }
		
		//'result:'
		public Keyword getResultKeyword_1_3_3() { return cResultKeyword_1_3_3; }
		
		//resultat+=Resultat
		public Assignment getResultatAssignment_1_3_4() { return cResultatAssignment_1_3_4; }
		
		//Resultat
		public RuleCall getResultatResultatParserRuleCall_1_3_4_0() { return cResultatResultatParserRuleCall_1_3_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3_5() { return cRightCurlyBracketKeyword_1_3_5; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_4() { return cRightCurlyBracketKeyword_1_4; }
	}
	public class QuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.slr.ReliSRS.Question");
		private final RuleCall cCHAINEParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Question:
		//	CHAINE;
		@Override public ParserRule getRule() { return rule; }
		
		//CHAINE
		public RuleCall getCHAINEParserRuleCall() { return cCHAINEParserRuleCall; }
	}
	public class ResponseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.slr.ReliSRS.Response");
		private final RuleCall cCHAINEParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Response:
		//	CHAINE;
		@Override public ParserRule getRule() { return rule; }
		
		//CHAINE
		public RuleCall getCHAINEParserRuleCall() { return cCHAINEParserRuleCall; }
	}
	public class ResultatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.slr.ReliSRS.Resultat");
		private final RuleCall cENTIERParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Resultat:
		//	ENTIER;
		@Override public ParserRule getRule() { return rule; }
		
		//ENTIER
		public RuleCall getENTIERParserRuleCall() { return cENTIERParserRuleCall; }
	}
	public class PhasesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.slr.ReliSRS.Phases");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPhasesAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cPhaseNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPhaseNamePhaseNameParserRuleCall_1_0_0 = (RuleCall)cPhaseNameAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cDecisionPerUserKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cDecisionPerUserAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cDecisionPerUserDecisionPerUserParserRuleCall_1_1_1_1_0 = (RuleCall)cDecisionPerUserAssignment_1_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cStatisticsOnExclusionCriteriaKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cStatisticsOnExclusionCriteriaAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cStatisticsOnExclusionCriteriaStatisticsOnExclusionCriteriaParserRuleCall_1_1_2_1_0 = (RuleCall)cStatisticsOnExclusionCriteriaAssignment_1_1_2_1.eContents().get(0);
		private final Group cGroup_1_1_3 = (Group)cGroup_1_1.eContents().get(3);
		private final Keyword cConflictResolutionKeyword_1_1_3_0 = (Keyword)cGroup_1_1_3.eContents().get(0);
		private final Assignment cConflictResolutionAssignment_1_1_3_1 = (Assignment)cGroup_1_1_3.eContents().get(1);
		private final RuleCall cConflictResolutionConflictResolutionParserRuleCall_1_1_3_1_0 = (RuleCall)cConflictResolutionAssignment_1_1_3_1.eContents().get(0);
		private final Group cGroup_1_1_4 = (Group)cGroup_1_1.eContents().get(4);
		private final Keyword cResultKeyword_1_1_4_0 = (Keyword)cGroup_1_1_4.eContents().get(0);
		private final Assignment cResultAssignment_1_1_4_1 = (Assignment)cGroup_1_1_4.eContents().get(1);
		private final RuleCall cResultResultParserRuleCall_1_1_4_1_0 = (RuleCall)cResultAssignment_1_1_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_5 = (Keyword)cGroup_1_1.eContents().get(5);
		
		//Phases:
		//	{Phases} (phaseName=PhaseName ('{' ('DecisionPerUser:' decisionPerUser=DecisionPerUser)
		//	('StatisticsOnExclusionCriteria:' statisticsOnExclusionCriteria=StatisticsOnExclusionCriteria) ('ConflictResolution:'
		//	conflictResolution=ConflictResolution) ('Result:' result=Result)
		//	'}'));
		@Override public ParserRule getRule() { return rule; }
		
		//{Phases} (phaseName=PhaseName ('{' ('DecisionPerUser:' decisionPerUser=DecisionPerUser)
		//('StatisticsOnExclusionCriteria:' statisticsOnExclusionCriteria=StatisticsOnExclusionCriteria) ('ConflictResolution:'
		//conflictResolution=ConflictResolution) ('Result:' result=Result) '}'))
		public Group getGroup() { return cGroup; }
		
		//{Phases}
		public Action getPhasesAction_0() { return cPhasesAction_0; }
		
		//phaseName=PhaseName ('{' ('DecisionPerUser:' decisionPerUser=DecisionPerUser) ('StatisticsOnExclusionCriteria:'
		//statisticsOnExclusionCriteria=StatisticsOnExclusionCriteria) ('ConflictResolution:'
		//conflictResolution=ConflictResolution) ('Result:' result=Result) '}')
		public Group getGroup_1() { return cGroup_1; }
		
		//phaseName=PhaseName
		public Assignment getPhaseNameAssignment_1_0() { return cPhaseNameAssignment_1_0; }
		
		//PhaseName
		public RuleCall getPhaseNamePhaseNameParserRuleCall_1_0_0() { return cPhaseNamePhaseNameParserRuleCall_1_0_0; }
		
		//'{' ('DecisionPerUser:' decisionPerUser=DecisionPerUser) ('StatisticsOnExclusionCriteria:'
		//statisticsOnExclusionCriteria=StatisticsOnExclusionCriteria) ('ConflictResolution:'
		//conflictResolution=ConflictResolution) ('Result:' result=Result) '}'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1_0() { return cLeftCurlyBracketKeyword_1_1_0; }
		
		//'DecisionPerUser:' decisionPerUser=DecisionPerUser
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//'DecisionPerUser:'
		public Keyword getDecisionPerUserKeyword_1_1_1_0() { return cDecisionPerUserKeyword_1_1_1_0; }
		
		//decisionPerUser=DecisionPerUser
		public Assignment getDecisionPerUserAssignment_1_1_1_1() { return cDecisionPerUserAssignment_1_1_1_1; }
		
		//DecisionPerUser
		public RuleCall getDecisionPerUserDecisionPerUserParserRuleCall_1_1_1_1_0() { return cDecisionPerUserDecisionPerUserParserRuleCall_1_1_1_1_0; }
		
		//'StatisticsOnExclusionCriteria:' statisticsOnExclusionCriteria=StatisticsOnExclusionCriteria
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }
		
		//'StatisticsOnExclusionCriteria:'
		public Keyword getStatisticsOnExclusionCriteriaKeyword_1_1_2_0() { return cStatisticsOnExclusionCriteriaKeyword_1_1_2_0; }
		
		//statisticsOnExclusionCriteria=StatisticsOnExclusionCriteria
		public Assignment getStatisticsOnExclusionCriteriaAssignment_1_1_2_1() { return cStatisticsOnExclusionCriteriaAssignment_1_1_2_1; }
		
		//StatisticsOnExclusionCriteria
		public RuleCall getStatisticsOnExclusionCriteriaStatisticsOnExclusionCriteriaParserRuleCall_1_1_2_1_0() { return cStatisticsOnExclusionCriteriaStatisticsOnExclusionCriteriaParserRuleCall_1_1_2_1_0; }
		
		//'ConflictResolution:' conflictResolution=ConflictResolution
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }
		
		//'ConflictResolution:'
		public Keyword getConflictResolutionKeyword_1_1_3_0() { return cConflictResolutionKeyword_1_1_3_0; }
		
		//conflictResolution=ConflictResolution
		public Assignment getConflictResolutionAssignment_1_1_3_1() { return cConflictResolutionAssignment_1_1_3_1; }
		
		//ConflictResolution
		public RuleCall getConflictResolutionConflictResolutionParserRuleCall_1_1_3_1_0() { return cConflictResolutionConflictResolutionParserRuleCall_1_1_3_1_0; }
		
		//'Result:' result=Result
		public Group getGroup_1_1_4() { return cGroup_1_1_4; }
		
		//'Result:'
		public Keyword getResultKeyword_1_1_4_0() { return cResultKeyword_1_1_4_0; }
		
		//result=Result
		public Assignment getResultAssignment_1_1_4_1() { return cResultAssignment_1_1_4_1; }
		
		//Result
		public RuleCall getResultResultParserRuleCall_1_1_4_1_0() { return cResultResultParserRuleCall_1_1_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_1_5() { return cRightCurlyBracketKeyword_1_1_5; }
	}
	public class PhaseNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.slr.ReliSRS.PhaseName");
		private final RuleCall cCHAINEParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PhaseName:
		//	CHAINE;
		@Override public ParserRule getRule() { return rule; }
		
		//CHAINE
		public RuleCall getCHAINEParserRuleCall() { return cCHAINEParserRuleCall; }
	}
	public class DecisionPerUserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.slr.ReliSRS.DecisionPerUser");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDecisionPerUserAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cD_UserKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cDUserAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cDUserDUserParserRuleCall_1_2_0 = (RuleCall)cDUserAssignment_1_2.eContents().get(0);
		private final Keyword cD_IncludedKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cDIncludedAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cDIncludedDIncludedParserRuleCall_1_4_0 = (RuleCall)cDIncludedAssignment_1_4.eContents().get(0);
		private final Keyword cD_ExcludedKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cDExcludedAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cDExcludedDExcludedParserRuleCall_1_6_0 = (RuleCall)cDExcludedAssignment_1_6.eContents().get(0);
		private final Keyword cD_InConfclictKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		private final Assignment cDInConflictAssignment_1_8 = (Assignment)cGroup_1.eContents().get(8);
		private final RuleCall cDInConflictDInConflictParserRuleCall_1_8_0 = (RuleCall)cDInConflictAssignment_1_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_9 = (Keyword)cGroup_1.eContents().get(9);
		
		//DecisionPerUser:
		//	{DecisionPerUser} ('{' 'D_User:' dUser+=DUser* 'D_Included:' dIncluded+=DIncluded* 'D_Excluded:'
		//	dExcluded+=DExcluded* 'D_InConfclict:' dInConflict+=DInConflict* '}')*;
		@Override public ParserRule getRule() { return rule; }
		
		//{DecisionPerUser} ('{' 'D_User:' dUser+=DUser* 'D_Included:' dIncluded+=DIncluded* 'D_Excluded:' dExcluded+=DExcluded*
		//'D_InConfclict:' dInConflict+=DInConflict* '}')*
		public Group getGroup() { return cGroup; }
		
		//{DecisionPerUser}
		public Action getDecisionPerUserAction_0() { return cDecisionPerUserAction_0; }
		
		//('{' 'D_User:' dUser+=DUser* 'D_Included:' dIncluded+=DIncluded* 'D_Excluded:' dExcluded+=DExcluded* 'D_InConfclict:'
		//dInConflict+=DInConflict* '}')*
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//'D_User:'
		public Keyword getD_UserKeyword_1_1() { return cD_UserKeyword_1_1; }
		
		//dUser+=DUser*
		public Assignment getDUserAssignment_1_2() { return cDUserAssignment_1_2; }
		
		//DUser
		public RuleCall getDUserDUserParserRuleCall_1_2_0() { return cDUserDUserParserRuleCall_1_2_0; }
		
		//'D_Included:'
		public Keyword getD_IncludedKeyword_1_3() { return cD_IncludedKeyword_1_3; }
		
		//dIncluded+=DIncluded*
		public Assignment getDIncludedAssignment_1_4() { return cDIncludedAssignment_1_4; }
		
		//DIncluded
		public RuleCall getDIncludedDIncludedParserRuleCall_1_4_0() { return cDIncludedDIncludedParserRuleCall_1_4_0; }
		
		//'D_Excluded:'
		public Keyword getD_ExcludedKeyword_1_5() { return cD_ExcludedKeyword_1_5; }
		
		//dExcluded+=DExcluded*
		public Assignment getDExcludedAssignment_1_6() { return cDExcludedAssignment_1_6; }
		
		//DExcluded
		public RuleCall getDExcludedDExcludedParserRuleCall_1_6_0() { return cDExcludedDExcludedParserRuleCall_1_6_0; }
		
		//'D_InConfclict:'
		public Keyword getD_InConfclictKeyword_1_7() { return cD_InConfclictKeyword_1_7; }
		
		//dInConflict+=DInConflict*
		public Assignment getDInConflictAssignment_1_8() { return cDInConflictAssignment_1_8; }
		
		//DInConflict
		public RuleCall getDInConflictDInConflictParserRuleCall_1_8_0() { return cDInConflictDInConflictParserRuleCall_1_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_9() { return cRightCurlyBracketKeyword_1_9; }
	}
	public class DUserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.slr.ReliSRS.DUser");
		private final RuleCall cCHAINEParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//DUser:
		//	CHAINE;
		@Override public ParserRule getRule() { return rule; }
		
		//CHAINE
		public RuleCall getCHAINEParserRuleCall() { return cCHAINEParserRuleCall; }
	}
	public class DIncludedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.slr.ReliSRS.DIncluded");
		private final RuleCall cENTIERParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//DIncluded:
		//	ENTIER;
		@Override public ParserRule getRule() { return rule; }
		
		//ENTIER
		public RuleCall getENTIERParserRuleCall() { return cENTIERParserRuleCall; }
	}
	public class DExcludedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.slr.ReliSRS.DExcluded");
		private final RuleCall cENTIERParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//DExcluded:
		//	ENTIER;
		@Override public ParserRule getRule() { return rule; }
		
		//ENTIER
		public RuleCall getENTIERParserRuleCall() { return cENTIERParserRuleCall; }
	}
	public class DInConflictElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.slr.ReliSRS.DInConflict");
		private final RuleCall cENTIERParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//DInConflict:
		//	ENTIER;
		@Override public ParserRule getRule() { return rule; }
		
		//ENTIER
		public RuleCall getENTIERParserRuleCall() { return cENTIERParserRuleCall; }
	}
	public class StatisticsOnExclusionCriteriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.slr.ReliSRS.StatisticsOnExclusionCriteria");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatisticsOnExclusionCriteriaAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cS_CriteriaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cSCriteriaAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSCriteriaSCriteriaParserRuleCall_1_2_0 = (RuleCall)cSCriteriaAssignment_1_2.eContents().get(0);
		private final Keyword cS_NombreKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cSNombreAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cSNombreSNombreParserRuleCall_1_4_0 = (RuleCall)cSNombreAssignment_1_4.eContents().get(0);
		private final Keyword cS_PourcentageKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cSPourcentageAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cSPourcentageSPourcentageParserRuleCall_1_6_0 = (RuleCall)cSPourcentageAssignment_1_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		
		//StatisticsOnExclusionCriteria:
		//	{StatisticsOnExclusionCriteria} ('{' 'S_Criteria:' sCriteria+=SCriteria* 'S_Nombre:' sNombre+=SNombre*
		//	'S_Pourcentage:' sPourcentage+=SPourcentage* '}')*;
		@Override public ParserRule getRule() { return rule; }
		
		//{StatisticsOnExclusionCriteria} ('{' 'S_Criteria:' sCriteria+=SCriteria* 'S_Nombre:' sNombre+=SNombre* 'S_Pourcentage:'
		//sPourcentage+=SPourcentage* '}')*
		public Group getGroup() { return cGroup; }
		
		//{StatisticsOnExclusionCriteria}
		public Action getStatisticsOnExclusionCriteriaAction_0() { return cStatisticsOnExclusionCriteriaAction_0; }
		
		//('{' 'S_Criteria:' sCriteria+=SCriteria* 'S_Nombre:' sNombre+=SNombre* 'S_Pourcentage:' sPourcentage+=SPourcentage*
		//'}')*
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//'S_Criteria:'
		public Keyword getS_CriteriaKeyword_1_1() { return cS_CriteriaKeyword_1_1; }
		
		//sCriteria+=SCriteria*
		public Assignment getSCriteriaAssignment_1_2() { return cSCriteriaAssignment_1_2; }
		
		//SCriteria
		public RuleCall getSCriteriaSCriteriaParserRuleCall_1_2_0() { return cSCriteriaSCriteriaParserRuleCall_1_2_0; }
		
		//'S_Nombre:'
		public Keyword getS_NombreKeyword_1_3() { return cS_NombreKeyword_1_3; }
		
		//sNombre+=SNombre*
		public Assignment getSNombreAssignment_1_4() { return cSNombreAssignment_1_4; }
		
		//SNombre
		public RuleCall getSNombreSNombreParserRuleCall_1_4_0() { return cSNombreSNombreParserRuleCall_1_4_0; }
		
		//'S_Pourcentage:'
		public Keyword getS_PourcentageKeyword_1_5() { return cS_PourcentageKeyword_1_5; }
		
		//sPourcentage+=SPourcentage*
		public Assignment getSPourcentageAssignment_1_6() { return cSPourcentageAssignment_1_6; }
		
		//SPourcentage
		public RuleCall getSPourcentageSPourcentageParserRuleCall_1_6_0() { return cSPourcentageSPourcentageParserRuleCall_1_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_7() { return cRightCurlyBracketKeyword_1_7; }
	}
	public class SCriteriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.slr.ReliSRS.SCriteria");
		private final RuleCall cCHAINEParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SCriteria:
		//	CHAINE;
		@Override public ParserRule getRule() { return rule; }
		
		//CHAINE
		public RuleCall getCHAINEParserRuleCall() { return cCHAINEParserRuleCall; }
	}
	public class SNombreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.slr.ReliSRS.SNombre");
		private final RuleCall cENTIERParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SNombre:
		//	ENTIER;
		@Override public ParserRule getRule() { return rule; }
		
		//ENTIER
		public RuleCall getENTIERParserRuleCall() { return cENTIERParserRuleCall; }
	}
	public class SPourcentageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.slr.ReliSRS.SPourcentage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//SPourcentage:
		//	INT* '.' INT*;
		@Override public ParserRule getRule() { return rule; }
		
		//INT* '.' INT*
		public Group getGroup() { return cGroup; }
		
		//INT*
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT*
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class ConflictResolutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.slr.ReliSRS.ConflictResolution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConflictResolutionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cC_DecisionKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cCDecisionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cCDecisionCDecisionEnumRuleCall_1_2_0 = (RuleCall)cCDecisionAssignment_1_2.eContents().get(0);
		private final Keyword cC_NombreKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cCNombreAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cCNombreCNombreParserRuleCall_1_4_0 = (RuleCall)cCNombreAssignment_1_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//ConflictResolution:
		//	{ConflictResolution} ('{' 'C_Decision:' cDecision+=CDecision* 'C_Nombre:' cNombre+=CNombre* '}')*;
		@Override public ParserRule getRule() { return rule; }
		
		//{ConflictResolution} ('{' 'C_Decision:' cDecision+=CDecision* 'C_Nombre:' cNombre+=CNombre* '}')*
		public Group getGroup() { return cGroup; }
		
		//{ConflictResolution}
		public Action getConflictResolutionAction_0() { return cConflictResolutionAction_0; }
		
		//('{' 'C_Decision:' cDecision+=CDecision* 'C_Nombre:' cNombre+=CNombre* '}')*
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//'C_Decision:'
		public Keyword getC_DecisionKeyword_1_1() { return cC_DecisionKeyword_1_1; }
		
		//cDecision+=CDecision*
		public Assignment getCDecisionAssignment_1_2() { return cCDecisionAssignment_1_2; }
		
		//CDecision
		public RuleCall getCDecisionCDecisionEnumRuleCall_1_2_0() { return cCDecisionCDecisionEnumRuleCall_1_2_0; }
		
		//'C_Nombre:'
		public Keyword getC_NombreKeyword_1_3() { return cC_NombreKeyword_1_3; }
		
		//cNombre+=CNombre*
		public Assignment getCNombreAssignment_1_4() { return cCNombreAssignment_1_4; }
		
		//CNombre
		public RuleCall getCNombreCNombreParserRuleCall_1_4_0() { return cCNombreCNombreParserRuleCall_1_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_5() { return cRightCurlyBracketKeyword_1_5; }
	}
	public class CNombreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.slr.ReliSRS.CNombre");
		private final RuleCall cENTIERParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//CNombre:
		//	ENTIER;
		@Override public ParserRule getRule() { return rule; }
		
		//ENTIER
		public RuleCall getENTIERParserRuleCall() { return cENTIERParserRuleCall; }
	}
	public class ResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.slr.ReliSRS.Result");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cResultAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cR_TotalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRTotalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRTotalRTotalParserRuleCall_2_0 = (RuleCall)cRTotalAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cR_DecisionKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cRDecisionAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cRDecisionRDecisionEnumRuleCall_3_2_0 = (RuleCall)cRDecisionAssignment_3_2.eContents().get(0);
		private final Keyword cR_PaperKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cRPaperAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cRPaperRPaperParserRuleCall_3_4_0 = (RuleCall)cRPaperAssignment_3_4.eContents().get(0);
		private final Keyword cR_PourcentageKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		private final Assignment cRPourcentageAssignment_3_6 = (Assignment)cGroup_3.eContents().get(6);
		private final RuleCall cRPourcentageRPourcentageParserRuleCall_3_6_0 = (RuleCall)cRPourcentageAssignment_3_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_7 = (Keyword)cGroup_3.eContents().get(7);
		
		//Result:
		//	{Result} 'R_Total:' rTotal=RTotal ('{' 'R_Decision:' rDecision+=RDecision* 'R_Paper:' rPaper+=RPaper*
		//	'R_Pourcentage:' rPourcentage+=RPourcentage* '}')*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Result} 'R_Total:' rTotal=RTotal ('{' 'R_Decision:' rDecision+=RDecision* 'R_Paper:' rPaper+=RPaper* 'R_Pourcentage:'
		//rPourcentage+=RPourcentage* '}')*
		public Group getGroup() { return cGroup; }
		
		//{Result}
		public Action getResultAction_0() { return cResultAction_0; }
		
		//'R_Total:'
		public Keyword getR_TotalKeyword_1() { return cR_TotalKeyword_1; }
		
		//rTotal=RTotal
		public Assignment getRTotalAssignment_2() { return cRTotalAssignment_2; }
		
		//RTotal
		public RuleCall getRTotalRTotalParserRuleCall_2_0() { return cRTotalRTotalParserRuleCall_2_0; }
		
		//('{' 'R_Decision:' rDecision+=RDecision* 'R_Paper:' rPaper+=RPaper* 'R_Pourcentage:' rPourcentage+=RPourcentage* '}')*
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//'R_Decision:'
		public Keyword getR_DecisionKeyword_3_1() { return cR_DecisionKeyword_3_1; }
		
		//rDecision+=RDecision*
		public Assignment getRDecisionAssignment_3_2() { return cRDecisionAssignment_3_2; }
		
		//RDecision
		public RuleCall getRDecisionRDecisionEnumRuleCall_3_2_0() { return cRDecisionRDecisionEnumRuleCall_3_2_0; }
		
		//'R_Paper:'
		public Keyword getR_PaperKeyword_3_3() { return cR_PaperKeyword_3_3; }
		
		//rPaper+=RPaper*
		public Assignment getRPaperAssignment_3_4() { return cRPaperAssignment_3_4; }
		
		//RPaper
		public RuleCall getRPaperRPaperParserRuleCall_3_4_0() { return cRPaperRPaperParserRuleCall_3_4_0; }
		
		//'R_Pourcentage:'
		public Keyword getR_PourcentageKeyword_3_5() { return cR_PourcentageKeyword_3_5; }
		
		//rPourcentage+=RPourcentage*
		public Assignment getRPourcentageAssignment_3_6() { return cRPourcentageAssignment_3_6; }
		
		//RPourcentage
		public RuleCall getRPourcentageRPourcentageParserRuleCall_3_6_0() { return cRPourcentageRPourcentageParserRuleCall_3_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_7() { return cRightCurlyBracketKeyword_3_7; }
	}
	public class RTotalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.slr.ReliSRS.RTotal");
		private final RuleCall cENTIERParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//RTotal:
		//	ENTIER;
		@Override public ParserRule getRule() { return rule; }
		
		//ENTIER
		public RuleCall getENTIERParserRuleCall() { return cENTIERParserRuleCall; }
	}
	public class RPaperElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.slr.ReliSRS.RPaper");
		private final RuleCall cENTIERParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//RPaper:
		//	ENTIER;
		@Override public ParserRule getRule() { return rule; }
		
		//ENTIER
		public RuleCall getENTIERParserRuleCall() { return cENTIERParserRuleCall; }
	}
	public class RPourcentageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.slr.ReliSRS.RPourcentage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//RPourcentage:
		//	INT* '.' INT*;
		@Override public ParserRule getRule() { return rule; }
		
		//INT* '.' INT*
		public Group getGroup() { return cGroup; }
		
		//INT*
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT*
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class ENTIERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.slr.ReliSRS.ENTIER");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ENTIER ecore::EInt:
		//	INT+;
		@Override public ParserRule getRule() { return rule; }
		
		//INT+
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class CHAINEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.slr.ReliSRS.CHAINE");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//CHAINE:
		//	ID+;
		@Override public ParserRule getRule() { return rule; }
		
		//ID+
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	
	public class CDecisionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.slr.ReliSRS.CDecision");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCresolvedIncludedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCresolvedIncludedResolvedIncludedKeyword_0_0 = (Keyword)cCresolvedIncludedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCresolvedExcludedEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCresolvedExcludedResolvedExcludedKeyword_1_0 = (Keyword)cCresolvedExcludedEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCpendingConflictEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCpendingConflictPendingConflictsKeyword_2_0 = (Keyword)cCpendingConflictEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum CDecision:
		//	CresolvedIncluded='Resolved included' | CresolvedExcluded='Resolved excluded' | CpendingConflict='Pending conflicts';
		public EnumRule getRule() { return rule; }
		
		//CresolvedIncluded='Resolved included' | CresolvedExcluded='Resolved excluded' | CpendingConflict='Pending conflicts'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CresolvedIncluded='Resolved included'
		public EnumLiteralDeclaration getCresolvedIncludedEnumLiteralDeclaration_0() { return cCresolvedIncludedEnumLiteralDeclaration_0; }
		
		//'Resolved included'
		public Keyword getCresolvedIncludedResolvedIncludedKeyword_0_0() { return cCresolvedIncludedResolvedIncludedKeyword_0_0; }
		
		//CresolvedExcluded='Resolved excluded'
		public EnumLiteralDeclaration getCresolvedExcludedEnumLiteralDeclaration_1() { return cCresolvedExcludedEnumLiteralDeclaration_1; }
		
		//'Resolved excluded'
		public Keyword getCresolvedExcludedResolvedExcludedKeyword_1_0() { return cCresolvedExcludedResolvedExcludedKeyword_1_0; }
		
		//CpendingConflict='Pending conflicts'
		public EnumLiteralDeclaration getCpendingConflictEnumLiteralDeclaration_2() { return cCpendingConflictEnumLiteralDeclaration_2; }
		
		//'Pending conflicts'
		public Keyword getCpendingConflictPendingConflictsKeyword_2_0() { return cCpendingConflictPendingConflictsKeyword_2_0; }
	}
	public class RDecisionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.slr.ReliSRS.RDecision");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRIncludedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRIncludedIncludedKeyword_0_0 = (Keyword)cRIncludedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRExcludedEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRExcludedExcludedKeyword_1_0 = (Keyword)cRExcludedEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRInConflictEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRInConflictInConflictKeyword_2_0 = (Keyword)cRInConflictEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cRInReviewEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cRInReviewInReviewKeyword_3_0 = (Keyword)cRInReviewEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cRPendingEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cRPendingPendingKeyword_4_0 = (Keyword)cRPendingEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum RDecision:
		//	RIncluded='Included' | RExcluded='Excluded' | RInConflict='In conflict' | RInReview='In review' | RPending='Pending';
		public EnumRule getRule() { return rule; }
		
		//RIncluded='Included' | RExcluded='Excluded' | RInConflict='In conflict' | RInReview='In review' | RPending='Pending'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RIncluded='Included'
		public EnumLiteralDeclaration getRIncludedEnumLiteralDeclaration_0() { return cRIncludedEnumLiteralDeclaration_0; }
		
		//'Included'
		public Keyword getRIncludedIncludedKeyword_0_0() { return cRIncludedIncludedKeyword_0_0; }
		
		//RExcluded='Excluded'
		public EnumLiteralDeclaration getRExcludedEnumLiteralDeclaration_1() { return cRExcludedEnumLiteralDeclaration_1; }
		
		//'Excluded'
		public Keyword getRExcludedExcludedKeyword_1_0() { return cRExcludedExcludedKeyword_1_0; }
		
		//RInConflict='In conflict'
		public EnumLiteralDeclaration getRInConflictEnumLiteralDeclaration_2() { return cRInConflictEnumLiteralDeclaration_2; }
		
		//'In conflict'
		public Keyword getRInConflictInConflictKeyword_2_0() { return cRInConflictInConflictKeyword_2_0; }
		
		//RInReview='In review'
		public EnumLiteralDeclaration getRInReviewEnumLiteralDeclaration_3() { return cRInReviewEnumLiteralDeclaration_3; }
		
		//'In review'
		public Keyword getRInReviewInReviewKeyword_3_0() { return cRInReviewInReviewKeyword_3_0; }
		
		//RPending='Pending'
		public EnumLiteralDeclaration getRPendingEnumLiteralDeclaration_4() { return cRPendingEnumLiteralDeclaration_4; }
		
		//'Pending'
		public Keyword getRPendingPendingKeyword_4_0() { return cRPendingPendingKeyword_4_0; }
	}
	
	private final ModelElements pModel;
	private final ProjectNameElements pProjectName;
	private final ParticipantsElements pParticipants;
	private final ParticipantElements pParticipant;
	private final RoleElements pRole;
	private final ClassificationElements pClassification;
	private final QuestionElements pQuestion;
	private final ResponseElements pResponse;
	private final ResultatElements pResultat;
	private final PhasesElements pPhases;
	private final PhaseNameElements pPhaseName;
	private final DecisionPerUserElements pDecisionPerUser;
	private final DUserElements pDUser;
	private final DIncludedElements pDIncluded;
	private final DExcludedElements pDExcluded;
	private final DInConflictElements pDInConflict;
	private final StatisticsOnExclusionCriteriaElements pStatisticsOnExclusionCriteria;
	private final SCriteriaElements pSCriteria;
	private final SNombreElements pSNombre;
	private final SPourcentageElements pSPourcentage;
	private final ConflictResolutionElements pConflictResolution;
	private final CDecisionElements eCDecision;
	private final CNombreElements pCNombre;
	private final ResultElements pResult;
	private final RDecisionElements eRDecision;
	private final RTotalElements pRTotal;
	private final RPaperElements pRPaper;
	private final RPourcentageElements pRPourcentage;
	private final ENTIERElements pENTIER;
	private final CHAINEElements pCHAINE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ReliSRSGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pProjectName = new ProjectNameElements();
		this.pParticipants = new ParticipantsElements();
		this.pParticipant = new ParticipantElements();
		this.pRole = new RoleElements();
		this.pClassification = new ClassificationElements();
		this.pQuestion = new QuestionElements();
		this.pResponse = new ResponseElements();
		this.pResultat = new ResultatElements();
		this.pPhases = new PhasesElements();
		this.pPhaseName = new PhaseNameElements();
		this.pDecisionPerUser = new DecisionPerUserElements();
		this.pDUser = new DUserElements();
		this.pDIncluded = new DIncludedElements();
		this.pDExcluded = new DExcludedElements();
		this.pDInConflict = new DInConflictElements();
		this.pStatisticsOnExclusionCriteria = new StatisticsOnExclusionCriteriaElements();
		this.pSCriteria = new SCriteriaElements();
		this.pSNombre = new SNombreElements();
		this.pSPourcentage = new SPourcentageElements();
		this.pConflictResolution = new ConflictResolutionElements();
		this.eCDecision = new CDecisionElements();
		this.pCNombre = new CNombreElements();
		this.pResult = new ResultElements();
		this.eRDecision = new RDecisionElements();
		this.pRTotal = new RTotalElements();
		this.pRPaper = new RPaperElements();
		this.pRPourcentage = new RPourcentageElements();
		this.pENTIER = new ENTIERElements();
		this.pCHAINE = new CHAINEElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.slr.ReliSRS".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	'ProjectName:' projectName=ProjectName ('Participants:' participants=Participants) ('Phase:' phase+=Phases*)*
	//	('Classification:' classification=Classification);
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//ProjectName:
	//	CHAINE;
	public ProjectNameElements getProjectNameAccess() {
		return pProjectName;
	}
	
	public ParserRule getProjectNameRule() {
		return getProjectNameAccess().getRule();
	}
	
	//Participants:
	//	{Participants} ('{' 'Participant:' participant+=Participant* 'Role:' role+=Role* '}')*;
	public ParticipantsElements getParticipantsAccess() {
		return pParticipants;
	}
	
	public ParserRule getParticipantsRule() {
		return getParticipantsAccess().getRule();
	}
	
	//Participant:
	//	CHAINE;
	public ParticipantElements getParticipantAccess() {
		return pParticipant;
	}
	
	public ParserRule getParticipantRule() {
		return getParticipantAccess().getRule();
	}
	
	//Role:
	//	CHAINE;
	public RoleElements getRoleAccess() {
		return pRole;
	}
	
	public ParserRule getRoleRule() {
		return getRoleAccess().getRule();
	}
	
	//Classification:
	//	{Classification} ('{' 'question:' question+=Question ('{'
	//	'response:' response+=Response
	//	'result:' resultat+=Resultat
	//	'}')*
	//	'}')*;
	public ClassificationElements getClassificationAccess() {
		return pClassification;
	}
	
	public ParserRule getClassificationRule() {
		return getClassificationAccess().getRule();
	}
	
	//Question:
	//	CHAINE;
	public QuestionElements getQuestionAccess() {
		return pQuestion;
	}
	
	public ParserRule getQuestionRule() {
		return getQuestionAccess().getRule();
	}
	
	//Response:
	//	CHAINE;
	public ResponseElements getResponseAccess() {
		return pResponse;
	}
	
	public ParserRule getResponseRule() {
		return getResponseAccess().getRule();
	}
	
	//Resultat:
	//	ENTIER;
	public ResultatElements getResultatAccess() {
		return pResultat;
	}
	
	public ParserRule getResultatRule() {
		return getResultatAccess().getRule();
	}
	
	//Phases:
	//	{Phases} (phaseName=PhaseName ('{' ('DecisionPerUser:' decisionPerUser=DecisionPerUser)
	//	('StatisticsOnExclusionCriteria:' statisticsOnExclusionCriteria=StatisticsOnExclusionCriteria) ('ConflictResolution:'
	//	conflictResolution=ConflictResolution) ('Result:' result=Result)
	//	'}'));
	public PhasesElements getPhasesAccess() {
		return pPhases;
	}
	
	public ParserRule getPhasesRule() {
		return getPhasesAccess().getRule();
	}
	
	//PhaseName:
	//	CHAINE;
	public PhaseNameElements getPhaseNameAccess() {
		return pPhaseName;
	}
	
	public ParserRule getPhaseNameRule() {
		return getPhaseNameAccess().getRule();
	}
	
	//DecisionPerUser:
	//	{DecisionPerUser} ('{' 'D_User:' dUser+=DUser* 'D_Included:' dIncluded+=DIncluded* 'D_Excluded:'
	//	dExcluded+=DExcluded* 'D_InConfclict:' dInConflict+=DInConflict* '}')*;
	public DecisionPerUserElements getDecisionPerUserAccess() {
		return pDecisionPerUser;
	}
	
	public ParserRule getDecisionPerUserRule() {
		return getDecisionPerUserAccess().getRule();
	}
	
	//DUser:
	//	CHAINE;
	public DUserElements getDUserAccess() {
		return pDUser;
	}
	
	public ParserRule getDUserRule() {
		return getDUserAccess().getRule();
	}
	
	//DIncluded:
	//	ENTIER;
	public DIncludedElements getDIncludedAccess() {
		return pDIncluded;
	}
	
	public ParserRule getDIncludedRule() {
		return getDIncludedAccess().getRule();
	}
	
	//DExcluded:
	//	ENTIER;
	public DExcludedElements getDExcludedAccess() {
		return pDExcluded;
	}
	
	public ParserRule getDExcludedRule() {
		return getDExcludedAccess().getRule();
	}
	
	//DInConflict:
	//	ENTIER;
	public DInConflictElements getDInConflictAccess() {
		return pDInConflict;
	}
	
	public ParserRule getDInConflictRule() {
		return getDInConflictAccess().getRule();
	}
	
	//StatisticsOnExclusionCriteria:
	//	{StatisticsOnExclusionCriteria} ('{' 'S_Criteria:' sCriteria+=SCriteria* 'S_Nombre:' sNombre+=SNombre*
	//	'S_Pourcentage:' sPourcentage+=SPourcentage* '}')*;
	public StatisticsOnExclusionCriteriaElements getStatisticsOnExclusionCriteriaAccess() {
		return pStatisticsOnExclusionCriteria;
	}
	
	public ParserRule getStatisticsOnExclusionCriteriaRule() {
		return getStatisticsOnExclusionCriteriaAccess().getRule();
	}
	
	//SCriteria:
	//	CHAINE;
	public SCriteriaElements getSCriteriaAccess() {
		return pSCriteria;
	}
	
	public ParserRule getSCriteriaRule() {
		return getSCriteriaAccess().getRule();
	}
	
	//SNombre:
	//	ENTIER;
	public SNombreElements getSNombreAccess() {
		return pSNombre;
	}
	
	public ParserRule getSNombreRule() {
		return getSNombreAccess().getRule();
	}
	
	//SPourcentage:
	//	INT* '.' INT*;
	public SPourcentageElements getSPourcentageAccess() {
		return pSPourcentage;
	}
	
	public ParserRule getSPourcentageRule() {
		return getSPourcentageAccess().getRule();
	}
	
	//ConflictResolution:
	//	{ConflictResolution} ('{' 'C_Decision:' cDecision+=CDecision* 'C_Nombre:' cNombre+=CNombre* '}')*;
	public ConflictResolutionElements getConflictResolutionAccess() {
		return pConflictResolution;
	}
	
	public ParserRule getConflictResolutionRule() {
		return getConflictResolutionAccess().getRule();
	}
	
	//enum CDecision:
	//	CresolvedIncluded='Resolved included' | CresolvedExcluded='Resolved excluded' | CpendingConflict='Pending conflicts';
	public CDecisionElements getCDecisionAccess() {
		return eCDecision;
	}
	
	public EnumRule getCDecisionRule() {
		return getCDecisionAccess().getRule();
	}
	
	//CNombre:
	//	ENTIER;
	public CNombreElements getCNombreAccess() {
		return pCNombre;
	}
	
	public ParserRule getCNombreRule() {
		return getCNombreAccess().getRule();
	}
	
	//Result:
	//	{Result} 'R_Total:' rTotal=RTotal ('{' 'R_Decision:' rDecision+=RDecision* 'R_Paper:' rPaper+=RPaper*
	//	'R_Pourcentage:' rPourcentage+=RPourcentage* '}')*;
	public ResultElements getResultAccess() {
		return pResult;
	}
	
	public ParserRule getResultRule() {
		return getResultAccess().getRule();
	}
	
	//enum RDecision:
	//	RIncluded='Included' | RExcluded='Excluded' | RInConflict='In conflict' | RInReview='In review' | RPending='Pending';
	public RDecisionElements getRDecisionAccess() {
		return eRDecision;
	}
	
	public EnumRule getRDecisionRule() {
		return getRDecisionAccess().getRule();
	}
	
	//RTotal:
	//	ENTIER;
	public RTotalElements getRTotalAccess() {
		return pRTotal;
	}
	
	public ParserRule getRTotalRule() {
		return getRTotalAccess().getRule();
	}
	
	//RPaper:
	//	ENTIER;
	public RPaperElements getRPaperAccess() {
		return pRPaper;
	}
	
	public ParserRule getRPaperRule() {
		return getRPaperAccess().getRule();
	}
	
	//RPourcentage:
	//	INT* '.' INT*;
	public RPourcentageElements getRPourcentageAccess() {
		return pRPourcentage;
	}
	
	public ParserRule getRPourcentageRule() {
		return getRPourcentageAccess().getRule();
	}
	
	//ENTIER ecore::EInt:
	//	INT+;
	public ENTIERElements getENTIERAccess() {
		return pENTIER;
	}
	
	public ParserRule getENTIERRule() {
		return getENTIERAccess().getRule();
	}
	
	//CHAINE:
	//	ID+;
	public CHAINEElements getCHAINEAccess() {
		return pCHAINE;
	}
	
	public ParserRule getCHAINERule() {
		return getCHAINEAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
