/**
 * generated by Xtext 2.14.0
 */
package org.xtext.slr.reliSRS.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.slr.reliSRS.ConflictResolution;
import org.xtext.slr.reliSRS.DecisionPerUser;
import org.xtext.slr.reliSRS.Phases;
import org.xtext.slr.reliSRS.ReliSRSPackage;
import org.xtext.slr.reliSRS.Result;
import org.xtext.slr.reliSRS.StatisticsOnExclusionCriteria;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Phases</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.slr.reliSRS.impl.PhasesImpl#getPhaseName <em>Phase Name</em>}</li>
 *   <li>{@link org.xtext.slr.reliSRS.impl.PhasesImpl#getDecisionPerUser <em>Decision Per User</em>}</li>
 *   <li>{@link org.xtext.slr.reliSRS.impl.PhasesImpl#getStatisticsOnExclusionCriteria <em>Statistics On Exclusion Criteria</em>}</li>
 *   <li>{@link org.xtext.slr.reliSRS.impl.PhasesImpl#getConflictResolution <em>Conflict Resolution</em>}</li>
 *   <li>{@link org.xtext.slr.reliSRS.impl.PhasesImpl#getResult <em>Result</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PhasesImpl extends MinimalEObjectImpl.Container implements Phases
{
  /**
   * The default value of the '{@link #getPhaseName() <em>Phase Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPhaseName()
   * @generated
   * @ordered
   */
  protected static final String PHASE_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPhaseName() <em>Phase Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPhaseName()
   * @generated
   * @ordered
   */
  protected String phaseName = PHASE_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getDecisionPerUser() <em>Decision Per User</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDecisionPerUser()
   * @generated
   * @ordered
   */
  protected DecisionPerUser decisionPerUser;

  /**
   * The cached value of the '{@link #getStatisticsOnExclusionCriteria() <em>Statistics On Exclusion Criteria</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatisticsOnExclusionCriteria()
   * @generated
   * @ordered
   */
  protected StatisticsOnExclusionCriteria statisticsOnExclusionCriteria;

  /**
   * The cached value of the '{@link #getConflictResolution() <em>Conflict Resolution</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConflictResolution()
   * @generated
   * @ordered
   */
  protected ConflictResolution conflictResolution;

  /**
   * The cached value of the '{@link #getResult() <em>Result</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getResult()
   * @generated
   * @ordered
   */
  protected Result result;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PhasesImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ReliSRSPackage.Literals.PHASES;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getPhaseName()
  {
    return phaseName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPhaseName(String newPhaseName)
  {
    String oldPhaseName = phaseName;
    phaseName = newPhaseName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReliSRSPackage.PHASES__PHASE_NAME, oldPhaseName, phaseName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DecisionPerUser getDecisionPerUser()
  {
    return decisionPerUser;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDecisionPerUser(DecisionPerUser newDecisionPerUser, NotificationChain msgs)
  {
    DecisionPerUser oldDecisionPerUser = decisionPerUser;
    decisionPerUser = newDecisionPerUser;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ReliSRSPackage.PHASES__DECISION_PER_USER, oldDecisionPerUser, newDecisionPerUser);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDecisionPerUser(DecisionPerUser newDecisionPerUser)
  {
    if (newDecisionPerUser != decisionPerUser)
    {
      NotificationChain msgs = null;
      if (decisionPerUser != null)
        msgs = ((InternalEObject)decisionPerUser).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ReliSRSPackage.PHASES__DECISION_PER_USER, null, msgs);
      if (newDecisionPerUser != null)
        msgs = ((InternalEObject)newDecisionPerUser).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ReliSRSPackage.PHASES__DECISION_PER_USER, null, msgs);
      msgs = basicSetDecisionPerUser(newDecisionPerUser, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReliSRSPackage.PHASES__DECISION_PER_USER, newDecisionPerUser, newDecisionPerUser));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StatisticsOnExclusionCriteria getStatisticsOnExclusionCriteria()
  {
    return statisticsOnExclusionCriteria;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStatisticsOnExclusionCriteria(StatisticsOnExclusionCriteria newStatisticsOnExclusionCriteria, NotificationChain msgs)
  {
    StatisticsOnExclusionCriteria oldStatisticsOnExclusionCriteria = statisticsOnExclusionCriteria;
    statisticsOnExclusionCriteria = newStatisticsOnExclusionCriteria;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ReliSRSPackage.PHASES__STATISTICS_ON_EXCLUSION_CRITERIA, oldStatisticsOnExclusionCriteria, newStatisticsOnExclusionCriteria);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStatisticsOnExclusionCriteria(StatisticsOnExclusionCriteria newStatisticsOnExclusionCriteria)
  {
    if (newStatisticsOnExclusionCriteria != statisticsOnExclusionCriteria)
    {
      NotificationChain msgs = null;
      if (statisticsOnExclusionCriteria != null)
        msgs = ((InternalEObject)statisticsOnExclusionCriteria).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ReliSRSPackage.PHASES__STATISTICS_ON_EXCLUSION_CRITERIA, null, msgs);
      if (newStatisticsOnExclusionCriteria != null)
        msgs = ((InternalEObject)newStatisticsOnExclusionCriteria).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ReliSRSPackage.PHASES__STATISTICS_ON_EXCLUSION_CRITERIA, null, msgs);
      msgs = basicSetStatisticsOnExclusionCriteria(newStatisticsOnExclusionCriteria, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReliSRSPackage.PHASES__STATISTICS_ON_EXCLUSION_CRITERIA, newStatisticsOnExclusionCriteria, newStatisticsOnExclusionCriteria));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConflictResolution getConflictResolution()
  {
    return conflictResolution;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConflictResolution(ConflictResolution newConflictResolution, NotificationChain msgs)
  {
    ConflictResolution oldConflictResolution = conflictResolution;
    conflictResolution = newConflictResolution;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ReliSRSPackage.PHASES__CONFLICT_RESOLUTION, oldConflictResolution, newConflictResolution);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConflictResolution(ConflictResolution newConflictResolution)
  {
    if (newConflictResolution != conflictResolution)
    {
      NotificationChain msgs = null;
      if (conflictResolution != null)
        msgs = ((InternalEObject)conflictResolution).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ReliSRSPackage.PHASES__CONFLICT_RESOLUTION, null, msgs);
      if (newConflictResolution != null)
        msgs = ((InternalEObject)newConflictResolution).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ReliSRSPackage.PHASES__CONFLICT_RESOLUTION, null, msgs);
      msgs = basicSetConflictResolution(newConflictResolution, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReliSRSPackage.PHASES__CONFLICT_RESOLUTION, newConflictResolution, newConflictResolution));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Result getResult()
  {
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetResult(Result newResult, NotificationChain msgs)
  {
    Result oldResult = result;
    result = newResult;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ReliSRSPackage.PHASES__RESULT, oldResult, newResult);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setResult(Result newResult)
  {
    if (newResult != result)
    {
      NotificationChain msgs = null;
      if (result != null)
        msgs = ((InternalEObject)result).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ReliSRSPackage.PHASES__RESULT, null, msgs);
      if (newResult != null)
        msgs = ((InternalEObject)newResult).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ReliSRSPackage.PHASES__RESULT, null, msgs);
      msgs = basicSetResult(newResult, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReliSRSPackage.PHASES__RESULT, newResult, newResult));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ReliSRSPackage.PHASES__DECISION_PER_USER:
        return basicSetDecisionPerUser(null, msgs);
      case ReliSRSPackage.PHASES__STATISTICS_ON_EXCLUSION_CRITERIA:
        return basicSetStatisticsOnExclusionCriteria(null, msgs);
      case ReliSRSPackage.PHASES__CONFLICT_RESOLUTION:
        return basicSetConflictResolution(null, msgs);
      case ReliSRSPackage.PHASES__RESULT:
        return basicSetResult(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ReliSRSPackage.PHASES__PHASE_NAME:
        return getPhaseName();
      case ReliSRSPackage.PHASES__DECISION_PER_USER:
        return getDecisionPerUser();
      case ReliSRSPackage.PHASES__STATISTICS_ON_EXCLUSION_CRITERIA:
        return getStatisticsOnExclusionCriteria();
      case ReliSRSPackage.PHASES__CONFLICT_RESOLUTION:
        return getConflictResolution();
      case ReliSRSPackage.PHASES__RESULT:
        return getResult();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ReliSRSPackage.PHASES__PHASE_NAME:
        setPhaseName((String)newValue);
        return;
      case ReliSRSPackage.PHASES__DECISION_PER_USER:
        setDecisionPerUser((DecisionPerUser)newValue);
        return;
      case ReliSRSPackage.PHASES__STATISTICS_ON_EXCLUSION_CRITERIA:
        setStatisticsOnExclusionCriteria((StatisticsOnExclusionCriteria)newValue);
        return;
      case ReliSRSPackage.PHASES__CONFLICT_RESOLUTION:
        setConflictResolution((ConflictResolution)newValue);
        return;
      case ReliSRSPackage.PHASES__RESULT:
        setResult((Result)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ReliSRSPackage.PHASES__PHASE_NAME:
        setPhaseName(PHASE_NAME_EDEFAULT);
        return;
      case ReliSRSPackage.PHASES__DECISION_PER_USER:
        setDecisionPerUser((DecisionPerUser)null);
        return;
      case ReliSRSPackage.PHASES__STATISTICS_ON_EXCLUSION_CRITERIA:
        setStatisticsOnExclusionCriteria((StatisticsOnExclusionCriteria)null);
        return;
      case ReliSRSPackage.PHASES__CONFLICT_RESOLUTION:
        setConflictResolution((ConflictResolution)null);
        return;
      case ReliSRSPackage.PHASES__RESULT:
        setResult((Result)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ReliSRSPackage.PHASES__PHASE_NAME:
        return PHASE_NAME_EDEFAULT == null ? phaseName != null : !PHASE_NAME_EDEFAULT.equals(phaseName);
      case ReliSRSPackage.PHASES__DECISION_PER_USER:
        return decisionPerUser != null;
      case ReliSRSPackage.PHASES__STATISTICS_ON_EXCLUSION_CRITERIA:
        return statisticsOnExclusionCriteria != null;
      case ReliSRSPackage.PHASES__CONFLICT_RESOLUTION:
        return conflictResolution != null;
      case ReliSRSPackage.PHASES__RESULT:
        return result != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (phaseName: ");
    result.append(phaseName);
    result.append(')');
    return result.toString();
  }

} //PhasesImpl
