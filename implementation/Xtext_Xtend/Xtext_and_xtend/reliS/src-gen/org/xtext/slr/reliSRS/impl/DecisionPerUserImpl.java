/**
 * generated by Xtext 2.14.0
 */
package org.xtext.slr.reliSRS.impl;

import java.util.Collection;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

import org.xtext.slr.reliSRS.DecisionPerUser;
import org.xtext.slr.reliSRS.ReliSRSPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Decision Per User</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.slr.reliSRS.impl.DecisionPerUserImpl#getDUser <em>DUser</em>}</li>
 *   <li>{@link org.xtext.slr.reliSRS.impl.DecisionPerUserImpl#getDIncluded <em>DIncluded</em>}</li>
 *   <li>{@link org.xtext.slr.reliSRS.impl.DecisionPerUserImpl#getDExcluded <em>DExcluded</em>}</li>
 *   <li>{@link org.xtext.slr.reliSRS.impl.DecisionPerUserImpl#getDInConflict <em>DIn Conflict</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DecisionPerUserImpl extends MinimalEObjectImpl.Container implements DecisionPerUser
{
  /**
   * The cached value of the '{@link #getDUser() <em>DUser</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDUser()
   * @generated
   * @ordered
   */
  protected EList<String> dUser;

  /**
   * The cached value of the '{@link #getDIncluded() <em>DIncluded</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDIncluded()
   * @generated
   * @ordered
   */
  protected EList<String> dIncluded;

  /**
   * The cached value of the '{@link #getDExcluded() <em>DExcluded</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDExcluded()
   * @generated
   * @ordered
   */
  protected EList<String> dExcluded;

  /**
   * The cached value of the '{@link #getDInConflict() <em>DIn Conflict</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDInConflict()
   * @generated
   * @ordered
   */
  protected EList<String> dInConflict;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DecisionPerUserImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ReliSRSPackage.Literals.DECISION_PER_USER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getDUser()
  {
    if (dUser == null)
    {
      dUser = new EDataTypeEList<String>(String.class, this, ReliSRSPackage.DECISION_PER_USER__DUSER);
    }
    return dUser;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getDIncluded()
  {
    if (dIncluded == null)
    {
      dIncluded = new EDataTypeEList<String>(String.class, this, ReliSRSPackage.DECISION_PER_USER__DINCLUDED);
    }
    return dIncluded;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getDExcluded()
  {
    if (dExcluded == null)
    {
      dExcluded = new EDataTypeEList<String>(String.class, this, ReliSRSPackage.DECISION_PER_USER__DEXCLUDED);
    }
    return dExcluded;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getDInConflict()
  {
    if (dInConflict == null)
    {
      dInConflict = new EDataTypeEList<String>(String.class, this, ReliSRSPackage.DECISION_PER_USER__DIN_CONFLICT);
    }
    return dInConflict;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ReliSRSPackage.DECISION_PER_USER__DUSER:
        return getDUser();
      case ReliSRSPackage.DECISION_PER_USER__DINCLUDED:
        return getDIncluded();
      case ReliSRSPackage.DECISION_PER_USER__DEXCLUDED:
        return getDExcluded();
      case ReliSRSPackage.DECISION_PER_USER__DIN_CONFLICT:
        return getDInConflict();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ReliSRSPackage.DECISION_PER_USER__DUSER:
        getDUser().clear();
        getDUser().addAll((Collection<? extends String>)newValue);
        return;
      case ReliSRSPackage.DECISION_PER_USER__DINCLUDED:
        getDIncluded().clear();
        getDIncluded().addAll((Collection<? extends String>)newValue);
        return;
      case ReliSRSPackage.DECISION_PER_USER__DEXCLUDED:
        getDExcluded().clear();
        getDExcluded().addAll((Collection<? extends String>)newValue);
        return;
      case ReliSRSPackage.DECISION_PER_USER__DIN_CONFLICT:
        getDInConflict().clear();
        getDInConflict().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ReliSRSPackage.DECISION_PER_USER__DUSER:
        getDUser().clear();
        return;
      case ReliSRSPackage.DECISION_PER_USER__DINCLUDED:
        getDIncluded().clear();
        return;
      case ReliSRSPackage.DECISION_PER_USER__DEXCLUDED:
        getDExcluded().clear();
        return;
      case ReliSRSPackage.DECISION_PER_USER__DIN_CONFLICT:
        getDInConflict().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ReliSRSPackage.DECISION_PER_USER__DUSER:
        return dUser != null && !dUser.isEmpty();
      case ReliSRSPackage.DECISION_PER_USER__DINCLUDED:
        return dIncluded != null && !dIncluded.isEmpty();
      case ReliSRSPackage.DECISION_PER_USER__DEXCLUDED:
        return dExcluded != null && !dExcluded.isEmpty();
      case ReliSRSPackage.DECISION_PER_USER__DIN_CONFLICT:
        return dInConflict != null && !dInConflict.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (dUser: ");
    result.append(dUser);
    result.append(", dIncluded: ");
    result.append(dIncluded);
    result.append(", dExcluded: ");
    result.append(dExcluded);
    result.append(", dInConflict: ");
    result.append(dInConflict);
    result.append(')');
    return result.toString();
  }

} //DecisionPerUserImpl
