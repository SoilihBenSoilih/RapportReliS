/**
 * generated by Xtext 2.14.0
 */
package org.xtext.slr.reliSRS.impl;

import java.util.Collection;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

import org.xtext.slr.reliSRS.CDecision;
import org.xtext.slr.reliSRS.ConflictResolution;
import org.xtext.slr.reliSRS.ReliSRSPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Conflict Resolution</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.slr.reliSRS.impl.ConflictResolutionImpl#getCDecision <em>CDecision</em>}</li>
 *   <li>{@link org.xtext.slr.reliSRS.impl.ConflictResolutionImpl#getCNombre <em>CNombre</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConflictResolutionImpl extends MinimalEObjectImpl.Container implements ConflictResolution
{
  /**
   * The cached value of the '{@link #getCDecision() <em>CDecision</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCDecision()
   * @generated
   * @ordered
   */
  protected EList<CDecision> cDecision;

  /**
   * The cached value of the '{@link #getCNombre() <em>CNombre</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCNombre()
   * @generated
   * @ordered
   */
  protected EList<String> cNombre;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConflictResolutionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ReliSRSPackage.Literals.CONFLICT_RESOLUTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<CDecision> getCDecision()
  {
    if (cDecision == null)
    {
      cDecision = new EDataTypeEList<CDecision>(CDecision.class, this, ReliSRSPackage.CONFLICT_RESOLUTION__CDECISION);
    }
    return cDecision;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getCNombre()
  {
    if (cNombre == null)
    {
      cNombre = new EDataTypeEList<String>(String.class, this, ReliSRSPackage.CONFLICT_RESOLUTION__CNOMBRE);
    }
    return cNombre;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ReliSRSPackage.CONFLICT_RESOLUTION__CDECISION:
        return getCDecision();
      case ReliSRSPackage.CONFLICT_RESOLUTION__CNOMBRE:
        return getCNombre();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ReliSRSPackage.CONFLICT_RESOLUTION__CDECISION:
        getCDecision().clear();
        getCDecision().addAll((Collection<? extends CDecision>)newValue);
        return;
      case ReliSRSPackage.CONFLICT_RESOLUTION__CNOMBRE:
        getCNombre().clear();
        getCNombre().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ReliSRSPackage.CONFLICT_RESOLUTION__CDECISION:
        getCDecision().clear();
        return;
      case ReliSRSPackage.CONFLICT_RESOLUTION__CNOMBRE:
        getCNombre().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ReliSRSPackage.CONFLICT_RESOLUTION__CDECISION:
        return cDecision != null && !cDecision.isEmpty();
      case ReliSRSPackage.CONFLICT_RESOLUTION__CNOMBRE:
        return cNombre != null && !cNombre.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (cDecision: ");
    result.append(cDecision);
    result.append(", cNombre: ");
    result.append(cNombre);
    result.append(')');
    return result.toString();
  }

} //ConflictResolutionImpl
