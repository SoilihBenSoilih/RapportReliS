/**
 * generated by Xtext 2.14.0
 */
package org.xtext.slr.reliSRS.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

import org.xtext.slr.reliSRS.RDecision;
import org.xtext.slr.reliSRS.ReliSRSPackage;
import org.xtext.slr.reliSRS.Result;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Result</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.slr.reliSRS.impl.ResultImpl#getRTotal <em>RTotal</em>}</li>
 *   <li>{@link org.xtext.slr.reliSRS.impl.ResultImpl#getRDecision <em>RDecision</em>}</li>
 *   <li>{@link org.xtext.slr.reliSRS.impl.ResultImpl#getRPaper <em>RPaper</em>}</li>
 *   <li>{@link org.xtext.slr.reliSRS.impl.ResultImpl#getRPourcentage <em>RPourcentage</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ResultImpl extends MinimalEObjectImpl.Container implements Result
{
  /**
   * The default value of the '{@link #getRTotal() <em>RTotal</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRTotal()
   * @generated
   * @ordered
   */
  protected static final String RTOTAL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRTotal() <em>RTotal</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRTotal()
   * @generated
   * @ordered
   */
  protected String rTotal = RTOTAL_EDEFAULT;

  /**
   * The cached value of the '{@link #getRDecision() <em>RDecision</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRDecision()
   * @generated
   * @ordered
   */
  protected EList<RDecision> rDecision;

  /**
   * The cached value of the '{@link #getRPaper() <em>RPaper</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRPaper()
   * @generated
   * @ordered
   */
  protected EList<String> rPaper;

  /**
   * The cached value of the '{@link #getRPourcentage() <em>RPourcentage</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRPourcentage()
   * @generated
   * @ordered
   */
  protected EList<String> rPourcentage;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ResultImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ReliSRSPackage.Literals.RESULT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getRTotal()
  {
    return rTotal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRTotal(String newRTotal)
  {
    String oldRTotal = rTotal;
    rTotal = newRTotal;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReliSRSPackage.RESULT__RTOTAL, oldRTotal, rTotal));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<RDecision> getRDecision()
  {
    if (rDecision == null)
    {
      rDecision = new EDataTypeEList<RDecision>(RDecision.class, this, ReliSRSPackage.RESULT__RDECISION);
    }
    return rDecision;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getRPaper()
  {
    if (rPaper == null)
    {
      rPaper = new EDataTypeEList<String>(String.class, this, ReliSRSPackage.RESULT__RPAPER);
    }
    return rPaper;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getRPourcentage()
  {
    if (rPourcentage == null)
    {
      rPourcentage = new EDataTypeEList<String>(String.class, this, ReliSRSPackage.RESULT__RPOURCENTAGE);
    }
    return rPourcentage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ReliSRSPackage.RESULT__RTOTAL:
        return getRTotal();
      case ReliSRSPackage.RESULT__RDECISION:
        return getRDecision();
      case ReliSRSPackage.RESULT__RPAPER:
        return getRPaper();
      case ReliSRSPackage.RESULT__RPOURCENTAGE:
        return getRPourcentage();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ReliSRSPackage.RESULT__RTOTAL:
        setRTotal((String)newValue);
        return;
      case ReliSRSPackage.RESULT__RDECISION:
        getRDecision().clear();
        getRDecision().addAll((Collection<? extends RDecision>)newValue);
        return;
      case ReliSRSPackage.RESULT__RPAPER:
        getRPaper().clear();
        getRPaper().addAll((Collection<? extends String>)newValue);
        return;
      case ReliSRSPackage.RESULT__RPOURCENTAGE:
        getRPourcentage().clear();
        getRPourcentage().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ReliSRSPackage.RESULT__RTOTAL:
        setRTotal(RTOTAL_EDEFAULT);
        return;
      case ReliSRSPackage.RESULT__RDECISION:
        getRDecision().clear();
        return;
      case ReliSRSPackage.RESULT__RPAPER:
        getRPaper().clear();
        return;
      case ReliSRSPackage.RESULT__RPOURCENTAGE:
        getRPourcentage().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ReliSRSPackage.RESULT__RTOTAL:
        return RTOTAL_EDEFAULT == null ? rTotal != null : !RTOTAL_EDEFAULT.equals(rTotal);
      case ReliSRSPackage.RESULT__RDECISION:
        return rDecision != null && !rDecision.isEmpty();
      case ReliSRSPackage.RESULT__RPAPER:
        return rPaper != null && !rPaper.isEmpty();
      case ReliSRSPackage.RESULT__RPOURCENTAGE:
        return rPourcentage != null && !rPourcentage.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (rTotal: ");
    result.append(rTotal);
    result.append(", rDecision: ");
    result.append(rDecision);
    result.append(", rPaper: ");
    result.append(rPaper);
    result.append(", rPourcentage: ");
    result.append(rPourcentage);
    result.append(')');
    return result.toString();
  }

} //ResultImpl
