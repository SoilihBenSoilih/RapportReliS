/**
 * generated by Xtext 2.14.0
 */
package org.xtext.slr.reliSRS.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.slr.reliSRS.Classification;
import org.xtext.slr.reliSRS.Model;
import org.xtext.slr.reliSRS.Participants;
import org.xtext.slr.reliSRS.Phases;
import org.xtext.slr.reliSRS.ReliSRSPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.slr.reliSRS.impl.ModelImpl#getProjectName <em>Project Name</em>}</li>
 *   <li>{@link org.xtext.slr.reliSRS.impl.ModelImpl#getParticipants <em>Participants</em>}</li>
 *   <li>{@link org.xtext.slr.reliSRS.impl.ModelImpl#getPhase <em>Phase</em>}</li>
 *   <li>{@link org.xtext.slr.reliSRS.impl.ModelImpl#getClassification <em>Classification</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModelImpl extends MinimalEObjectImpl.Container implements Model
{
  /**
   * The default value of the '{@link #getProjectName() <em>Project Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProjectName()
   * @generated
   * @ordered
   */
  protected static final String PROJECT_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getProjectName() <em>Project Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProjectName()
   * @generated
   * @ordered
   */
  protected String projectName = PROJECT_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getParticipants() <em>Participants</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParticipants()
   * @generated
   * @ordered
   */
  protected Participants participants;

  /**
   * The cached value of the '{@link #getPhase() <em>Phase</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPhase()
   * @generated
   * @ordered
   */
  protected EList<Phases> phase;

  /**
   * The cached value of the '{@link #getClassification() <em>Classification</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClassification()
   * @generated
   * @ordered
   */
  protected Classification classification;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ReliSRSPackage.Literals.MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getProjectName()
  {
    return projectName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProjectName(String newProjectName)
  {
    String oldProjectName = projectName;
    projectName = newProjectName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReliSRSPackage.MODEL__PROJECT_NAME, oldProjectName, projectName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Participants getParticipants()
  {
    return participants;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetParticipants(Participants newParticipants, NotificationChain msgs)
  {
    Participants oldParticipants = participants;
    participants = newParticipants;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ReliSRSPackage.MODEL__PARTICIPANTS, oldParticipants, newParticipants);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setParticipants(Participants newParticipants)
  {
    if (newParticipants != participants)
    {
      NotificationChain msgs = null;
      if (participants != null)
        msgs = ((InternalEObject)participants).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ReliSRSPackage.MODEL__PARTICIPANTS, null, msgs);
      if (newParticipants != null)
        msgs = ((InternalEObject)newParticipants).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ReliSRSPackage.MODEL__PARTICIPANTS, null, msgs);
      msgs = basicSetParticipants(newParticipants, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReliSRSPackage.MODEL__PARTICIPANTS, newParticipants, newParticipants));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Phases> getPhase()
  {
    if (phase == null)
    {
      phase = new EObjectContainmentEList<Phases>(Phases.class, this, ReliSRSPackage.MODEL__PHASE);
    }
    return phase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Classification getClassification()
  {
    return classification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetClassification(Classification newClassification, NotificationChain msgs)
  {
    Classification oldClassification = classification;
    classification = newClassification;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ReliSRSPackage.MODEL__CLASSIFICATION, oldClassification, newClassification);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setClassification(Classification newClassification)
  {
    if (newClassification != classification)
    {
      NotificationChain msgs = null;
      if (classification != null)
        msgs = ((InternalEObject)classification).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ReliSRSPackage.MODEL__CLASSIFICATION, null, msgs);
      if (newClassification != null)
        msgs = ((InternalEObject)newClassification).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ReliSRSPackage.MODEL__CLASSIFICATION, null, msgs);
      msgs = basicSetClassification(newClassification, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReliSRSPackage.MODEL__CLASSIFICATION, newClassification, newClassification));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ReliSRSPackage.MODEL__PARTICIPANTS:
        return basicSetParticipants(null, msgs);
      case ReliSRSPackage.MODEL__PHASE:
        return ((InternalEList<?>)getPhase()).basicRemove(otherEnd, msgs);
      case ReliSRSPackage.MODEL__CLASSIFICATION:
        return basicSetClassification(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ReliSRSPackage.MODEL__PROJECT_NAME:
        return getProjectName();
      case ReliSRSPackage.MODEL__PARTICIPANTS:
        return getParticipants();
      case ReliSRSPackage.MODEL__PHASE:
        return getPhase();
      case ReliSRSPackage.MODEL__CLASSIFICATION:
        return getClassification();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ReliSRSPackage.MODEL__PROJECT_NAME:
        setProjectName((String)newValue);
        return;
      case ReliSRSPackage.MODEL__PARTICIPANTS:
        setParticipants((Participants)newValue);
        return;
      case ReliSRSPackage.MODEL__PHASE:
        getPhase().clear();
        getPhase().addAll((Collection<? extends Phases>)newValue);
        return;
      case ReliSRSPackage.MODEL__CLASSIFICATION:
        setClassification((Classification)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ReliSRSPackage.MODEL__PROJECT_NAME:
        setProjectName(PROJECT_NAME_EDEFAULT);
        return;
      case ReliSRSPackage.MODEL__PARTICIPANTS:
        setParticipants((Participants)null);
        return;
      case ReliSRSPackage.MODEL__PHASE:
        getPhase().clear();
        return;
      case ReliSRSPackage.MODEL__CLASSIFICATION:
        setClassification((Classification)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ReliSRSPackage.MODEL__PROJECT_NAME:
        return PROJECT_NAME_EDEFAULT == null ? projectName != null : !PROJECT_NAME_EDEFAULT.equals(projectName);
      case ReliSRSPackage.MODEL__PARTICIPANTS:
        return participants != null;
      case ReliSRSPackage.MODEL__PHASE:
        return phase != null && !phase.isEmpty();
      case ReliSRSPackage.MODEL__CLASSIFICATION:
        return classification != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (projectName: ");
    result.append(projectName);
    result.append(')');
    return result.toString();
  }

} //ModelImpl
